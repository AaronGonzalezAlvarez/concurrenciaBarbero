import java.util.concurrent.Semaphore;
import java.util.Random;

class Barberia {
    private static final int NUM_SILLAS_ESPERA = 5;
    private Semaphore barbero = new Semaphore(0);
    private Semaphore cliente = new Semaphore(0);
    private Semaphore mutex = new Semaphore(1);
    private int clientesEsperando = 0;
    private Random rand = new Random();

    public void entrarBarberia(int id) {
        try {
            mutex.acquire();
            if (clientesEsperando < NUM_SILLAS_ESPERA) {
                clientesEsperando++;
                System.out.println("Cliente " + id + " entró a la barbería y se sentó en una silla de espera.");
                mutex.release();
                cliente.release();
                barbero.acquire();
                recibirCortePelo(id);
            } else {
                System.out.println("Cliente " + id + " no encontró sillas de espera y se fue.");
                mutex.release();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public void recibirCortePelo(int id) {
        System.out.println("Cliente " + id + " está recibiendo un corte de pelo.");
        int tiempoCorte = 5 + rand.nextInt(6);
        try {
            Thread.sleep(tiempoCorte * 1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("Cliente " + id + " terminó el corte de pelo.");
        cliente.release();
        barbero.acquire();
        limpiarSillon(id);
    }

    public void limpiarSillon(int id) {
        System.out.println("Cliente " + id + " está limpiando el sillón.");
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("Cliente " + id + " ha terminado de limpiar el sillón.");
    }

    public void cortarPelo(int id) {
        try {
            while (true) {
                if (cliente.availablePermits() == 0) {
                    System.out.println("El barbero está durmiendo.");
                    Thread.sleep((10 + rand.nextInt(11)) * 1000);
                }
                barbero.release();
                cliente.acquire();
                mutex.acquire();
                clientesEsperando--;
                mutex.release();
                System.out.println("El barbero está cortando el pelo al cliente " + id + ".");
                Thread.sleep((5 + rand.nextInt(6)) * 1000);
                System.out.println("El barbero ha terminado de cortar el pelo al cliente " + id + ".");
                barbero.acquire();
                cliente.release();
                System.out.println("El barbero está limpiando el sillón.");
                Thread.sleep(5000);
                System.out.println("El barbero ha terminado de limpiar el sillón.");
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

class Cliente implements Runnable {
    private int id;
    private Barberia barberia;

    public Cliente(int id, Barberia barberia) {
        this.id = id;
        this.barberia = barberia;
    }

    @Override
    public void run() {
        barberia.entrarBarberia(id);
    }
}

public class BarberoDurmiente {
    public static void main(String[] args) {
        Barberia barberia = new Barberia();
        Thread barberoThread = new Thread(() -> barberia.cortarPelo(1));
        barberoThread.start();

        for (int i = 1; i <= 10; i++) {
            Thread clienteThread = new Thread(new Cliente(i, barberia));
            clienteThread.start();
        }
    }
}